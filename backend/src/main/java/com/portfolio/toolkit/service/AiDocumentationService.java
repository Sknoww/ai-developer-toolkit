package com.portfolio.toolkit.service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class AiDocumentationService {

    @Value("${ai.openai.api-key}")
    private String openaiApiKey;

    @Value("${ai.anthropic.api-key}")
    private String anthropicApiKey;

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public AiDocumentationService() {
        this.restTemplate = new RestTemplate();
        this.objectMapper = new ObjectMapper();
    }

    // Mocked response for development purposes without AI services configured
    private String generateMockDocumentation(String sourceCode, String apiEndpoint) {
        return String.format(
                """
                        # API Documentation

                        ## Endpoint: %s

                        ### Description
                        This endpoint provides REST API functionality for managing resources. The implementation follows standard Spring Boot patterns with proper HTTP status codes and response handling.

                        ### HTTP Methods
                        - **GET**: Retrieves resources (returns 200 OK with data)
                        - **POST**: Creates new resources (returns 201 CREATED with created resource)

                        ### Request/Response Format
                        - **Content-Type**: application/json
                        - **Response Format**: JSON

                        ### Example Usage
                        ```bash
                        # GET request
                        curl -X GET %s

                        # POST request
                        curl -X POST %s \\
                          -H "Content-Type: application/json" \\
                          -d '{"key": "value"}'
                        ```

                        ### Error Responses
                        - **400 Bad Request**: Invalid input data
                        - **404 Not Found**: Resource not found
                        - **500 Internal Server Error**: Server error

                        ### Implementation Notes
                        - Uses Spring Boot ResponseEntity for proper HTTP responses
                        - Follows RESTful conventions
                        - Includes proper error handling

                        ### Source Code Analysis
                        ```java
                        %s
                        ```

                        ---
                        *Documentation generated by AI Developer Toolkit (Mock Mode)*
                        """,
                apiEndpoint, apiEndpoint, apiEndpoint, sourceCode);
    }

    public String generateApiDocumentation(String sourceCode, String apiEndpoint) {
        System.out.println(">>> Starting AI documentation generation...");

        try {
            System.out.println(">>> Trying OpenAI...");
            return generateWithOpenAI(sourceCode, apiEndpoint);
        } catch (Exception e) {
            System.out.println(">>> OpenAI FAILED: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            try {
                System.out.println(">>> Trying Anthropic...");
                return generateWithAnthropic(sourceCode, apiEndpoint);
            } catch (Exception e2) {
                System.out.println(">>> Anthropic FAILED: " + e2.getClass().getSimpleName() + " - " + e2.getMessage());
                System.out.println(">>> Using mock AI documentation for development");
                return generateMockDocumentation(sourceCode, apiEndpoint);
            }
        }
    }

    private String generateWithOpenAI(String sourceCode, String apiEndpoint) {
        try {
            String url = "https://api.openai.com/v1/chat/completions";

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + openaiApiKey);

            String prompt = buildDocumentationPrompt(sourceCode, apiEndpoint);

            Map<String, Object> requestBody = Map.of(
                    "model", "gpt-3.5-turbo",
                    "messages", List.of(
                            Map.of("role", "system", "content", "You are an expert API documentation generator."),
                            Map.of("role", "user", "content", prompt)),
                    "max_tokens", 1000,
                    "temperature", 0.3);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

            JsonNode jsonResponse = objectMapper.readTree(response.getBody());
            return jsonResponse.path("choices").get(0).path("message").path("content").asText();

        } catch (Exception e) {
            throw new RuntimeException("OpenAI API call failed: " + e.getMessage(), e);
        }
    }

    private String generateWithAnthropic(String sourceCode, String apiEndpoint) {
        try {
            String url = "https://api.anthropic.com/v1/messages";

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("x-api-key", anthropicApiKey);
            headers.set("anthropic-version", "2023-06-01");

            String prompt = buildDocumentationPrompt(sourceCode, apiEndpoint);

            Map<String, Object> requestBody = Map.of(
                    "model", "claude-3-haiku-20240307",
                    "max_tokens", 1000,
                    "messages", List.of(
                            Map.of("role", "user", "content", prompt)));

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

            JsonNode jsonResponse = objectMapper.readTree(response.getBody());
            return jsonResponse.path("content").get(0).path("text").asText();

        } catch (Exception e) {
            throw new RuntimeException("Anthropic API call failed: " + e.getMessage(), e);
        }
    }

    private String buildDocumentationPrompt(String sourceCode, String apiEndpoint) {
        return String.format("""
                Generate comprehensive API documentation for this Spring Boot endpoint:

                Endpoint: %s
                Source Code:
                ```java
                %s
                ```

                Please provide:
                1. Endpoint description and purpose
                2. HTTP method and URL path
                3. Request parameters (path, query, body)
                4. Response format and examples
                5. Possible error codes and responses
                6. Usage examples with curl commands

                Format as clean, professional API documentation.
                """, apiEndpoint, sourceCode);
    }
}